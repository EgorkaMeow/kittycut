{"version":3,"sources":["Components/FormCut/logo.svg","Components/FormCut/FormCut.js","Main/Main.js","Page/Page.js","serviceWorker.js","index.js"],"names":["module","exports","FormCut","state","url","show_cut_url","cut_url","handleChangeInputValue","e","setState","target","value","createLink","preventDefault","form_data","FormData","append","validateURL","fetch","method","body","then","r","json","data","status","link","alert","catch","err","console","error","selectCutUrl","select","textval","test","closeResult","className","onSubmit","this","src","logo","alt","type","name","onChange","placeholder","style","display","onClick","readOnly","React","Component","Main","Page","componentWillMount","a","window","location","pathname","response","result","href","Boolean","hostname","match","ReactDOM","render","StrictMode","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,wQCqF5BC,E,4MAhFXC,MAAQ,CACJC,IAAK,GACLC,cAAc,EACdC,QAAS,I,EAGbC,uBAAyB,SAACC,GACtB,EAAKC,SAAS,CACVL,IAAKI,EAAEE,OAAOC,S,EAItBC,WAAa,SAACJ,GACVA,EAAEK,iBACF,IAAIC,EAAY,IAAIC,SACpBD,EAAUE,OAAO,SAAU,eAC3BF,EAAUE,OAAO,OAAQ,EAAKb,MAAMC,KAEjC,EAAKa,YAAY,EAAKd,MAAMC,KAC3Bc,MAAM,qCAAsC,CACxCC,OAAQ,OACRC,KAAMN,IAETO,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAACG,GACe,MAAfA,EAAKC,OACJ,EAAKhB,SAAS,CACVJ,cAAc,EACdC,QAASkB,EAAKE,OAIlBC,MAAM,0LAGbC,OAAM,SAACC,GACJC,QAAQC,MAAMF,MAIlBF,MAAM,kF,EAIdK,aAAe,SAACxB,GACZA,EAAEE,OAAOuB,U,EAGbhB,YAAc,SAACiB,GAIX,MAFc,+aAEAC,KAAKD,I,EAGvBE,YAAc,WACV,EAAK3B,SAAS,CAAEJ,cAAc,K,uDAI9B,OACI,oCACI,yBAAKgC,UAAU,cACX,0BAAMC,SAAUC,KAAK3B,YACjB,yBAAK4B,IAAKC,IAAMC,IAAI,aACpB,yBAAKL,UAAU,cACX,2BAAOM,KAAK,OAAOC,KAAK,gBAAgBjC,MAAO4B,KAAKpC,MAAMC,IAAKyC,SAAUN,KAAKhC,uBAAwBuC,YAAY,QAClH,4CAGR,yBAAKT,UAAU,aAAaU,MAAO,CAAEC,QAAST,KAAKpC,MAAME,aAAe,OAAQ,SAC5E,0BAAM4C,QAASV,KAAKH,aAApB,UACA,2BAAOO,KAAK,OAAOC,KAAK,WAAWjC,MAAO4B,KAAKpC,MAAMG,QAAS2C,QAASV,KAAKP,aAAckB,UAAQ,W,GAzEpGC,IAAMC,WCYbC,E,uKARP,OACI,yBAAKhB,UAAU,aACX,kBAAC,EAAD,W,GAJGc,IAAMC,W,yBC2BVE,G,kNA7BXC,mB,sBAAqB,gCAAAC,EAAA,6DACbhC,EAAO,IAAIT,UACVC,OAAO,SAAU,YACtBQ,EAAKR,OAAO,OAAQ,cAAgByC,OAAOC,SAASC,UAHnC,SAKMzC,MAAM,qCAAsC,CAC/DC,OAAQ,OACRC,KAAMI,IAPO,UAUK,MALhBoC,EALW,QAULnC,OAVK,iCAWMmC,EAASrC,OAXf,OAYO,OADhBsC,EAXS,QAYHpC,OACNgC,OAAOC,SAASI,KAAO,UAAYD,EAAOnC,KAG1C+B,OAAOC,SAASI,KAAO,IAhBd,wBAoBbL,OAAOC,SAASI,KAAO,IApBV,4C,uDAyBjB,OAAQ,uD,GA1BGX,IAAMC,YCSLW,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2D,mBCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,KAAKC,UAAWjB,OAIlCkB,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdlD,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMgD,c","file":"static/js/main.4115aadc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fd51c2a7.svg\";","import React from 'react';\nimport './FormCut.css';\nimport logo from './logo.svg';\n\nclass FormCut extends React.Component {\n    state = {\n        url: '',\n        show_cut_url: false,\n        cut_url: '',\n    }\n\n    handleChangeInputValue = (e) => {\n        this.setState({\n            url: e.target.value,\n        });\n    }\n\n    createLink = (e) => {\n        e.preventDefault();\n        let form_data = new FormData();\n        form_data.append('action', 'create_link');\n        form_data.append('link', this.state.url);\n\n        if(this.validateURL(this.state.url)){\n            fetch('http://localhost/backend/index.php', {\n                method: 'POST',\n                body: form_data,\n            })\n            .then(r => r.json())\n            .then((data) => {\n                if(data.status == 'ok'){\n                    this.setState({\n                        show_cut_url: true,\n                        cut_url: data.link,\n                    })\n                }\n                else {\n                    alert('Возникла ошибка, повторите заново!');\n                }\n            })\n            .catch((err) => {\n                console.error(err);\n            });\n        }\n        else {\n            alert('Неправильный url!')\n        }\n    }\n\n    selectCutUrl = (e) => {\n        e.target.select();\n    }\n\n    validateURL = (textval) => {\n        // eslint-disable-next-line\n        let regexp =  /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n    \n        return regexp.test(textval);\n    }\n\n    closeResult = () => {\n        this.setState({ show_cut_url: false });\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"form-block\">\n                    <form onSubmit={this.createLink}>\n                        <img src={logo} alt=\"kittycut\" />\n                        <div className=\"input-item\">\n                            <input type=\"text\" name=\"original_link\" value={this.state.url} onChange={this.handleChangeInputValue} placeholder=\"URL\" />\n                            <button>&#10004;</button>\n                        </div>\n                    </form>\n                    <div className=\"cut_result\" style={{ display: this.state.show_cut_url ? 'flex': 'none'}}>\n                        <span onClick={this.closeResult}>&#10006;</span>\n                        <input type=\"text\" name=\"cut_link\" value={this.state.cut_url} onClick={this.selectCutUrl} readOnly />\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default FormCut;","import React from 'react';\nimport './Main.css';\n\nimport Form from '../Components/FormCut/FormCut';\n\n\nclass Main extends React.Component {\n    render () {\n        return (\n            <div className=\"container\">\n                <Form />\n            </div>\n        )\n    }\n};\n\nexport default Main;","import React from 'react';\nimport './Page.css';\n\nclass Page extends React.Component {\n    componentWillMount = async () => {\n        let data = new FormData();\n        data.append('action', 'get_link');\n        data.append('link', 'kittycut.tk' + window.location.pathname);\n\n        const response = await fetch('http://localhost/backend/index.php', {\n            method: 'POST',\n            body: data\n        });\n\n        if(response.status == 200){\n            let result = await response.json();\n            if(result.status == 'ok'){\n                window.location.href = 'http://' + result.link;\n            }\n            else {\n                window.location.href = \"/\";\n            }\n        }\n        else {\n            window.location.href = \"/\";\n        }\n    }\n\n    render(){\n        return (<section>Redirecting...</section>);\n    }\n};\n\nexport default Page;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main/Main';\nimport Page from './Page/Page';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Switch>\n        <Route exact path='/' component={Main} />\n        <Route path='/*' component={Page} />\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}